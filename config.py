from operator import add
import os
import logging


# import dotenv
# dotenv.load_dotenv()


from logging.handlers import RotatingFileHandler

#force user to join your backup channel leave 0 if you don't need.
FORCE_SUB_CHANNEL = int(os.environ.get("FORCE_SUB_CHANNEL", "-1002465462823"))
FORCE_SUB_CHANNEL2 = int(os.environ.get("FORCE_SUB_CHANNEL2", "-1002458286985"))

if FORCE_SUB_CHANNEL > FORCE_SUB_CHANNEL2:
    temp = FORCE_SUB_CHANNEL2 
    FORCE_SUB_CHANNEL2 = FORCE_SUB_CHANNEL
    FORCE_SUB_CHANNEL = temp

#bot stats
BOT_STATS_TEXT = os.environ.get("BOTS_STATS_TEXT","<b>BOT UPTIME üå∫</b>\n{uptime}")
#send custom message when user interact with bot
USER_REPLY_TEXT = os.environ.get("USER_REPLY_TEXT", "<b> ô·¥Ä·¥ã·¥ã·¥Ä !  è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥ç è Íú±·¥á…¥·¥ò·¥Ä…™</b>")

#your bot token here from https://telegram.me/BotFather
TG_BOT_TOKEN = os.environ.get("TG_BOT_TOKEN", "") 
#your api id from https://my.telegram.org/apps
APP_ID = int(os.environ.get("APP_ID", "18946488"))
#your api hash from https://my.telegram.org/apps
API_HASH = os.environ.get("API_HASH", "c163d4e28e63196c3806cf3b9b2885de")
#your channel_id from https://t.me/MissRose_bot by forwarding dummy message to rose and applying command `/id` in reply to that message
CHANNEL_ID = int(os.environ.get("CHANNEL_ID", "-1002415326345"))
#your id of telegram can be found by https://t.me/MissRose_bot with '/id' command
OWNER_ID = int(os.environ.get("OWNER_ID", "6692613520"))
#port set to default 8080
PORT = os.environ.get("PORT", "8080")
#your database url mongodb only You can use mongo atlas free cloud database
DB_URL = os.environ.get("DB_URL", "mongodb+srv://Kdramast:Kdramast@cluster0.uhf52.mongodb.net/?retryWrites=true&w=majority")
#your database name
DB_NAME = os.environ.get("DB_NAME", "Cluster0")

START_PIC = os.environ.get("START_PIC", "https://graph.org/file/9eff9023429a2bf643574-add775ea5ee45e9d24.jpg")
FORCE_PIC = os.environ.get("FORCE_PIC", "https://graph.org/file/eb7c8ae9786956240d9f6-48d8610b8c5263ba0e.jpg")

#for creating telegram thread for bot to improve performance of the bot
TG_BOT_WORKERS = int(os.environ.get("TG_BOT_WORKERS", "60"))
#your start default command message.
START_MSG = os.environ.get("START_MESSAGE", "<b>Hello üíï {mention} \n\n …™ ·¥Ä·¥ç “ì…™ ü·¥á s·¥õ·¥è Ä·¥á  ô·¥è·¥õ, …™ ·¥Ñ·¥Ä…¥ s·¥õ·¥è Ä·¥á ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á “ì…™ ü·¥ás …™…¥ s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥è·¥õ ú·¥á Ä ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ñ·¥Ñ·¥áss …™·¥õ “ì Ä·¥è·¥ç s·¥ò·¥á·¥Ñ…™·¥Ä ü  ü…™…¥·¥ã.\n\n·¥Ñ ú·¥á·¥Ñ·¥ã ·¥è·¥ú·¥õ ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±  ô·¥á ü·¥è·¥° Íú∞·¥è Ä ·¥ç·¥è Ä·¥á!üëá</b>")
#your telegram tag without @
OWNER_TAG = os.environ.get("OWNER_TAG", "Sitaratoons_Support_bot")
#Time in seconds for message delete, put 0 to never delete
TIME = int(os.environ.get("TIME", "1800"))


#Shortner (token system) 
"""
some token verification sites
https://adrinolinks.in/
"""

# Turn this feature on or off using True or False put value inside  ""
# TRUE for yes FALSE if no 
USE_SHORTLINK = True if os.environ.get('USE_SHORTLINK', "false") == "True" else False 
# only shareus service known rightnow rest you can test on your own
SHORTLINK_API_URL = os.environ.get("SHORTLINK_API_URL", "arlinks.in")
# SHORTLINK_API_KEY = os.environ.get("SHORTLINK_API_KEY", "")
#use this key if not working ‚ò†Ô∏è (jokin!!)
SHORTLINK_API_KEY = os.environ.get("SHORTLINK_API_KEY", "b12d324481cefcfe34f8802dc8dab8a0a640d370")
#add your custom time in secs for shortlink expiration.
# 24hr = 86400
# 12hr = 43200
VERIFY_EXPIRE = int(os.environ.get('VERIFY_EXPIRE', "86400")) # Add time in seconds
#put TRUE if you want shortner in every link generated by the bot.
U_S_E_P = True if (True if os.environ.get('U_S_E_P', "True") == "True" else False) and (USE_SHORTLINK) else False
#Tutorial video for the user of your shortner on how to download.
TUT_VID = os.environ.get("TUT_VID","https://t.me/How_to_Download_7x/32")





#Payment to remove the token system
#put TRUE if you want this feature
USE_PAYMENT = True if (True if os.environ.get("USE_PAYMENT", "True") == "True" else False) and (USE_SHORTLINK) else False
#UPI ID
UPI_ID = os.environ.get("UPI_ID", "acxanime@upi")
#UPI QR CODE IMAGE
UPI_IMAGE_URL = os.environ.get("UPI_IMAGE_URL", "https://acxanimess.github.io/Pay/")
#SCREENSHOT URL of ADMIN for verification of payments
SCREENSHOT_URL = os.environ.get("SCREENSHOT_URL", f"t.me/{OWNER_TAG}")
#Time and its price
#7 Days
PRICE1 = os.environ.get("PRICE1", "15")
#1 Month
PRICE2 = os.environ.get("PRICE2", "30")
#3 Month
PRICE3 = os.environ.get("PRICE3", "100")
#6 Month
PRICE4 = os.environ.get("PRICE4", "200")
#1 Year
PRICE5 = os.environ.get("PRICE5", "350")



#force message for joining the channel
FORCE_MSG = os.environ.get("FORCE_MSG", "<b> ú·¥á ü ü·¥è {mention} \n·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á üs ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥  Ä·¥á ü·¥è·¥Ä·¥Ö button ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ·¥á·¥Ö Íú∞…™ ü·¥á</b> ü•∫")
#custom caption 
CUSTOM_CAPTION = os.environ.get("CUSTOM_CAPTION", None)
#protected content so that no files can be sent from the bot to anyone. recommended False
# TRUE for yes FALSE if no
PROTECT_CONTENT = True if os.environ.get("PROTECT_CONTENT", "False") == "True" else False
#used if you dont need buttons on database channel.
# True for yes False if no
DISABLE_CHANNEL_BUTTON = True if os.environ.get("DISABLE_CHANNEL_BUTTON", "True") == "True" else False
#you can add admin inside the bot(bug right now will fix later)

#add admins with space seperated
# 7195990000 289371935 248979023
ADMIN_LIST = os.environ.get("ADMINS", "6692613520").split()




#no need to add anything from now on
ADMINS = [int(admin) for admin in ADMIN_LIST if admin.isdigit()]
ADMINS.append(OWNER_ID)


LOG_FILE_NAME = "logs.txt"
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s - %(levelname)s] - %(name)s - %(message)s",
    datefmt='%d-%b-%y %H:%M:%S',
    handlers=[
        RotatingFileHandler(
            LOG_FILE_NAME,
            maxBytes=50000000,
            backupCount=10
        ),
        logging.StreamHandler()
    ]
)

logging.getLogger("pyrogram").setLevel(logging.WARNING)
def LOGGER(name: str) -> logging.Logger:
    return logging.getLogger(name)
